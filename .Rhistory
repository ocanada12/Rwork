getwd()
# 2)작업공간
getwd()
setwd("C:/Rwork/data")
# 2)작업공간
getwd()
test <- read.csv("test.csv")
test
str(test)
#01. 현재 작업 공간을 확인하고 "D:/Rwork/"로 변경하시오.
setwd("C:/Rwork")
getwd()
#02. 다음 조건에 맞게 name, age, address 변수를 생성하고 출력하시오.
var1 <- name
var2 <- age
var3 <- address
#03. 다음 rain 변수는 비 유무를 나타내는 변수이다. 이 변수를 요인형으로 변경하시오.
rain <- c('YES', 'No', 'YES', 'YES', 'NO')
var3 <- address
var1
var2
var3
#02. 다음 조건에 맞게 name, age, address 변수를 생성하고 출력하시오.
var1 <- name
var2 <- age
var1 <- name
var2 <- age
var3 <- address
var1
var2
var3
#02. 다음 조건에 맞게 name, age, address 변수를 생성하고 출력하시오.
name <- name
age <- age
address <- address
name
age
age
age <- age
#02. 다음 조건에 맞게 name, age, address 변수를 생성하고 출력하시오.
name <- "name"
age <- "age"
address <- "address"
name
name;age;address
#조건1) name, age, address 변수에 자신의 이름, 나이, 주소를 만들고 출력한다.
name <- "한철진"
age <- 28
addresss <-"미국 텍사스"
name;age;address
name;age;address
#조건2) mode() 함수를 이용하여 각 변수의 자료형(data type)을 확인한다.
mode(name)
mode(age)
frain <- as.factor(rain)
frain
class(frain)
mode(frain)
#조건1) women은 어떤 데이터 셋 인지를 쓰시오?
mode(women)
#조건2) women 데이터 셋의 자료형은 무엇인가?
class(women)
#조건3) plot() 함수를 이용하여 기본 차트 그리기
plot(women)
# 1) 변수(variable) : 메모리 주소를 저장
# - R의 모든 변수는 객체(참조변수)
# - 변수 선언 시 type 없음
a <- c(1:10000)
a
#조건1) 1~10까지 벡터를 생성한다.
vam <-c(1:10)
vam
#조건2) 생성된 벡터를 대상으로 평균을 구한다.
mean(vam)
#조건3) plot() 함수를 이용하여 기본 차트 그리기
plot(women)
women
class(frain)
mode(frain)
str(frain)
#조건1) women은 어떤 데이터 셋 인지를 쓰시오?
mode(women)
#조건2) women 데이터 셋의 자료형은 무엇인가?
class(women)
#조건3) plot() 함수를 이용하여 기본 차트 그리기
plot(women)
#조건1) women은 어떤 데이터 셋 인지를 쓰시오?
mode(women)
#조건1) women은 어떤 데이터 셋 인지를 쓰시오?
women
#조건1) women은 어떤 데이터 셋 인지를 쓰시오?
data()
#조건1) women은 어떤 데이터 셋 인지를 쓰시오?
data(women)
#조건1) women은 어떤 데이터 셋 인지를 쓰시오?
data()
# c()함수
x <- c(1:5)
x
y <- c(1,3,5)
y
# seq()
seq(1,9,by=2)
seq(9,1,by=-2)
# rep()
rep(1:3,3)
rep(1:3,each=3)
# 색인(index) : 자료의 위치(index)
a <- c(1:100)
a
plot(a)
a[100]
a[50:60]
plot(a[50:60])
length(a)
a
length(50:60)
length(a[50:60])
a[length(a)-5]
a[length(a)-5:length(a)]
a[length(a)-5:length(a)]
a[length(a)-5:length(a)]
a[length(a)-5:length(a)]
a[(length(a)-5):length(a)]
a[start:end]
a[start:end]
a[start:end]
a[start:end]
a[start:end]
a[start:end]
a[start:end]
a[start:end]
a[start:end]
#boolean : 특정조건
a[a>=10 & a<=50]
start = length(a)-5
end = length(a)
a[start:end]
#boolean : 특정조건
mode(a[a>=10 & a<=50])
#boolean : 특정조건
class(a[a>=10 & a<=50])
# matrix()
matrix(c(1:9))
# matrix()
matrix(c(1:9),nrow=3)
# matrix()
matrix(c(1:9),nrow=2)
# matrix()
matrix(c(1:9),nrow=3)
# matrix()
matrix(c(1:9),nrow=9)
# matrix()
matrix(c(1:9),nrow=1)
# matrix()
matrix(c(1:9),nrow=3)
# matrix()
m1 <- matrix(c(1:9),nrow=3)
dim(m1)
m1
dim(m1)
x1 <- 1:5  #c(1:5)
x2 <- 2:6
x1;x2
# rbind()
m2 <- rbind(x1,x2)
m2
plot(m2)
plot(m1)
m3
# cbind()
m3 <- cbind(x1, x2)
m3
m3[1,1]
# matrix index
m3[row,col]
# matrix index
m3[row,col]
m3
# cbind()
m3 <- cbind(x1, x2)
# matrix index
m3[1,2]
m3[1,]
m3[,1]
m3[,2]
m3[1,2:2,4]
m3[1,2:2,4]
m3[1,2:2,4]
m3[c(1,2):c(2,4)]
m3[c(1,2):c(2,4)]
m3[c(1:2):c(2:4)]
m3[c(1:2):c(2:4)]
m3[c(1:2),c(2:4)]
m3[c(1:2),c(2:4)]
m2[c(1:2),c(2:4)]
m2[c(1:2),c(2:4)]
m2[c(1:2),c(2:4)]
m2[c(1:2),c(2:4)]
m2[c(1:2),c(2:4)]
x <- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)
x
x <- matrix(1:9, nrow = 3, ncol = 3, byrow = FALSE) # byrow 행단위로 값을 우선적으로 채우겠다는 의미
x
x <- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) # byrow 행단위로 값을 우선적으로 채우겠다는 의미
x
colnames(x) <- c("one","two","three")
x
x
# broadcast 연산
x <- 1:10
x*0.5
x * 0.5  # vector * scala
# 1) vector vs matrix
x <- 1:3
y <- matrix(1:6, nrow = 2)
dim(y)
x*y
z<-x*y
z
# apply() : 처리
apply(z, 1, sum)
apply(z, 2, mean)
apply(z, 2, max)
# 3. array
# - 동일한 자료형을 갖는 3차원 배열구조
arr <- array(1:12,c(3,2,2))
arr
arr
arr
dim(arr)
plot(arr)
arr
arr[,,1]
arr[1,,]
arr[1,,]
arr[,,2] # 2면
arr[,,1] # 1면
no <- 1:3
name <- c("홍길동","이순신","유관순")
age <- c(35,45,25)
pay <- c(200,300,150)
data.frame(NO=no, NAME=name, AGE=age, PAY=pay)
emp <- data.frame(NO=no, NAME=name, AGE=age, PAY=pay)
emp
# obj$column
epay <- emp$PAY
epay
mode(epay)
# 산포도 : 분산과 표준편차
var(epay)
sqrt(var(epay))
sd(epay)
#1) Vec1 벡터 변수를 만들고, 1~5까지 연속된 정수를 만드시오.
Vec1 <- 1:5
Vec1
#2) Vec2 벡터 변수에 1~10까지 3간격으로 연속된 정수를 만드시오.
Vec2 <- seq(1:10,by=3)
#2) Vec2 벡터 변수에 1~10까지 3간격으로 연속된 정수를 만드시오.
Vec2 <- seq(1,10,by=3)
Vec2
#3) Vec3 벡터 변수에 "R" 문자가 5회 반복되도록 하시오.
Vec3 <- rep("R",5)
Vex3
Vec3
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
Vec4 <- Vec2;Vec3
Vec4
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
Vec4 <- c(Vec2,Vec3)
Vec4
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
Vec4 <- c(Vec1,Vec2)
Vec4
#5) 25~ -15까지 5간격으로 벡터 생성- seq()함수 이용
seq(25,-15,by=-5)
#5) 25~ -15까지 5간격으로 벡터 생성- seq()함수 이용
seq(25,-15,by=5)
#5) 25~ -15까지 5간격으로 벡터 생성- seq()함수 이용
seq(25,-15,by=-5)
#boolean : 특정조건
a[a>=10 & a<=50]
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec4[Vec4&2=1]
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec4[seq(1,length(vec4),2)]
Vec4
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
Vec4 <- c(Vec1,Vec2)
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec4[seq(1,length(Vec4),2)]
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec5 <- Vec4[seq(1,length(Vec4),2)]
Vec5
# 단계1> 행 단위로 묶어서 matrix 생성하기
rbind(v1,v2)
# 02. 다음 두 개의 벡터를 이용하여 단계별로 처리하시오.
v1 <- c(2,3,10,-5,8)
v2 <- c(40,50,-30,7,10)
# 단계1> 행 단위로 묶어서 matrix 생성하기
rbind(v1,v2)
# 단계2> matrix 차원 보기
dim(rbind(v1,v2))
# 단계3> matrix 열 단위 합계 계산하기
apply(1,2,sum)
# 단계3> matrix 열 단위 합계 계산하기
apply(x,2,sum)
# 단계3> matrix 열 단위 합계 계산하기
apply(x,1,sum)
# cbind()
m3 <- cbind(x1, x2)
# matrix index : obj[row, column]
m3[1,2] # 2
m3[1,] # 1행전체
# box
m2[c(1:2),c(2:4)]
# box
m2[c(1:2),c(2:4)]
x <- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) # byrow 행단위로 값을 우선적으로 채우겠다는 의미
colnames(x) <- c("one","two","three")
# 1) vector vs matrix
x <- 1:3
y <- matrix(1:6, nrow = 2)
dim(y) # 2 3
z<-x*y
z
# apply(x, margin(1/2), fun) : 처리
apply(z, 1, sum) # 20 26
# 단계1> 행 단위로 묶어서 matrix 생성하기
m <- rbind(v1,v2)
# 단계3> matrix 열 단위 합계 계산하기
apply(m,2,sum)
# 단계3> matrix 열 단위 합계 계산하기
apply(m,2,sum)
name <-c("최민수","유관순", "이순신","김유신","홍길동")
# 단계3> matrix 열 단위 합계 계산하기
apply(m,2,sum)
# <조건1> 위 7개 벡터를 user이름으로 데이터 프레임 생성
user <- data.frame(NAME=name,AGE=age,GENDER=gender,JOB=job,SAT=sat,GRADE=grade,TOTAL=total)
# <조건1> 위 7개 벡터를 user이름으로 데이터 프레임 생성
user <- data.frame(NAME=name,AGE=age,GENDER=gender,JOB=job,SAT=sat,GRADE=grade,TOTAL=total)
user
# <조건1> 위 7개 벡터를 user이름으로 데이터 프레임 생성
user <- data.frame(NAME=name,AGE=age,GENDER=gender,JOB=job,SAT=sat,GRADE=grade,TOTAL=total)
name <-c("최민수","유관순", "이순신","김유신","홍길동")
age <-c(55,45,45,53,15) #연령
gender <-c(1,2,1,1,1) #1:남자, 2: 여자
job <-c("연예인","주부","군인","직장인","학생")
sat <-c(3,4,2,5,5) # 만족도
grade <- c("C","C","A","D","A")
total <-c(44.4,28.5,43.5,NA,27.1) #총구매금액(NA:결측치)
# <조건1> 위 7개 벡터를 user이름으로 데이터 프레임 생성
user <- data.frame(NAME=name,AGE=age,GENDER=gender,JOB=job,SAT=sat,GRADE=grade,TOTAL=total)
user
# <조건2> 총구매금액(total) 변수를 이용하여 히스토그램 그리기-hist()
hist(total)
# <조건2> 총구매금액(total) 변수를 이용하여 히스토그램 그리기-hist()
hist(total)
# <조건3> 만족도(sat) 변수를 이용하여 산점도 그리기-plot()
plot(sat)
kor <- c(90,85,90)
eng <- c(70,85,75)
mat <- c(86,92,88)
# 조건1) 3개의 과목점수를 이용하여 데이터프레임(Data)을 생성한다.
sub <- data.frame(KOR=kor,ENG=eng,MAT=mat)
sub
# 조건2) 행/열 방향으로 max()함수를 적용하여 최댓값 구하기
apply(sub,1,max)
apply(sub,2,max)
# 조건3) 행/열 방향으로 mean()함수를 적용하여 평균 구하기(소숫점 2자리 까지 표현)
#  힌트 : round(data, 자릿수)
apply(sub,1,mean)
apply(sub,2,mean)
# 조건3) 행/열 방향으로 mean()함수를 적용하여 평균 구하기(소숫점 2자리 까지 표현)
#  힌트 : round(data, 자릿수)
round(apply(sub,1,mean),2)
round(apply(sub,2,mean),2)
# 조건3) 행/열 방향으로 mean()함수를 적용하여 평균 구하기(소숫점 2자리 까지 표현)
#  힌트 : round(data, 자릿수)
round(apply(sub,1,mean),2)
# 조건4) 행 단위 분산과 표준편차 구하기
#  힌트 : var(), sd()
apply(sub,1,var)
apply(sub,1,sd)
apply(sub,2,sd)
# 조건4) 행 단위 분산과 표준편차 구하기
#  힌트 : var(), sd()
apply(sub,2,var)
# 조건4) 행 단위 분산과 표준편차 구하기
#  힌트 : var(), sd()
apply(sub,2,var)
apply(sub,2,sd)
# <조건3> 만족도(sat) 변수를 이용하여 산점도 그리기-plot()
plot(user$sat)
# <조건3> 만족도(sat) 변수를 이용하여 산점도 그리기-plot()
plot(user$sat)
user
# <조건1> 위 7개 벡터를 user이름으로 데이터 프레임 생성
user <- data.frame(NAME=name,AGE=age,GENDER=gender,JOB=job,SAT=sat,GRADE=grade,TOTAL=total)
# <조건3> 만족도(sat) 변수를 이용하여 산점도 그리기-plot()
plot(user$sat)
# <조건2> 총구매금액(total) 변수를 이용하여 히스토그램 그리기-hist()
hist(user$total)
# <조건2> 총구매금액(total) 변수를 이용하여 히스토그램 그리기-hist()
hist(user$total)
apply(sub,1,sd)
# 조건4) 행 단위 분산과 표준편차 구하기
#  힌트 : var(), sd()
apply(sub,1,var)
apply(sub,1,sd)
# 조건4) 행 단위 분산과 표준편차 구하기
#  힌트 : var(), sd()
apply(sub,1,var)
apply(sub,1,sd)
# 조건4) 행 단위 분산과 표준편차 구하기
#  힌트 : var(), sd()
apply(sub,1,var)
apply(sub,1,sd)
# 조건4) 행 단위 분산과 표준편차 구하기
#  힌트 : var(), sd()
apply(sub,1,var)
apply(sub,1,sd)
# 조건4) 행 단위 분산과 표준편차 구하기
#  힌트 : var(), sd()
apply(sub,1,var)
scor <- c(90,85,83)
score <- c(90,85,83)
var(score)
# 분산
var(score)
# 분산
var(score)
# 표준편차 : 분산의 양의 제곱근
sd(score)
sqrt(scor)
sqrt(score)
sqrt(var(score)
sqrt(var(score))
sqrt(var(score))
# 표준편차 : 분산의 양의 제곱근
sd(score)
sqrt(var(score))
# 표준편차 : 분산의 양의 제곱근
sd(score)
sqrt(var(score))
# 분산 = sum((x-산술평균)^2) / n-1
mean(score)
# 분산 = sum((x-산술평균)^2) / n-1
avg<-mean(score)
avg
diff <- (score - avg)^2
diff_sum <- sum(diff)
var <- diff_sum / length(score)-1
var <- diff_sum / length(score) - 1
diff_sum <- sum(diff)
var <- diff_sum / length(score) - 1
var
# 분산
var(score)
var
var
var <- diff_sum / (length(score) - 1)
var
sd <- sqrt(var)
sd
sqrt(var(score))
list1 <- list('lee',"이순신",35,"hong","김말숙",45)
list1
# key -> value 접근
list[[1]] # -> "lee"의 key
list[[2]] # -> "이순신"의 key
# key -> value 접근
list[[1]] # -> "lee"의 key
list1
list1 <- list('lee',"이순신",35,"hong","김말숙",45)
# key -> value 접근
list[[1]] # -> "lee"의 key
# key -> value 접근
list[[1]] # -> "lee"의 key
# key -> value 접근
list[[1]] # -> "lee"의 key
list[[2]] # -> "이순신"의 key
list1[[2]] # -> "이순신"의 key
# key -> value 접근
list1[[1]] # -> "lee"의 key
# index -> key:value 접근
list1[]
# index -> key:value 접근
list1[4]
instsall.packages("stringr")
library(stringr)
instsall.packages("stringr")
install.packages("stringr")
library(stringr)
install.packages("stringr")
install.packages("stringr")
library(stringr)
str <- "홍길동35이순신45"
names <- str_extract_all(str,"[가-힣]{3}")
names
class(names)
names[[1]]
names[[1]][2]
# 2) key = value
member = list(name = c("홍길순","이순신"),
age = c(35,45),
gender = c("여","남"))
member
# key -> value
member$name
member$name[2]
class(member)
